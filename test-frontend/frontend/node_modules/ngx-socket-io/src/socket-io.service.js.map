{"version":3,"sources":["../../src/socket-io.service.ts"],"names":[],"mappings":"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","file":"socket-io.service.js","sourceRoot":"","sourcesContent":["import { Injectable, EventEmitter, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share'; \r\n\r\nimport * as io from 'socket.io-client';\r\n\r\nimport { SocketIoConfig } from './config/socket-io.config';\r\nimport { SOCKET_CONFIG_TOKEN } from './socket-io.module';\r\n\r\nexport class WrappedSocket {\r\n    subscribersCounter : number = 0;\r\n    ioSocket: any;\r\n    emptyConfig: SocketIoConfig = {\r\n        url: '',\r\n        options: {}\r\n    };\r\n\r\n    constructor( config: SocketIoConfig) {\r\n        if (config === undefined) config = this.emptyConfig;\r\n        const url: string = config.url;\r\n        const options: any = config.options;\r\n        var ioFunc = (io as any).default ? (io as any).default : io;\r\n        this.ioSocket = ioFunc(url, options);\r\n    }\r\n\r\n    on(eventName: string, callback: Function) {\r\n        this.ioSocket.on(eventName, callback);\r\n    }\r\n\r\n    once(eventName: string, callback: Function) {\r\n        this.ioSocket.once(eventName, callback);\r\n    }\r\n\r\n    connect() {\r\n        return this.ioSocket.connect();\r\n    }\r\n\r\n    disconnect(close?: any) {\r\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    emit(eventName: string, data?: any, callback?: Function) {\r\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    removeListener(eventName: string, callback?: Function) {\r\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    removeAllListeners(eventName?: string) {\r\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    fromEvent<T>(eventName: string): Observable<T> {\r\n        this.subscribersCounter++;\r\n        return Observable.create( (observer: any) => {\r\n             this.ioSocket.on(eventName, (data: T) => {\r\n                 observer.next(data);\r\n             });\r\n             return () => {\r\n                 if (this.subscribersCounter === 1)\r\n                    this.ioSocket.removeListener(eventName);\r\n            };\r\n        }).share();\r\n    }\r\n\r\n    fromOneTimeEvent<T>(eventName: string): Promise<T> {\r\n        return new Promise<T>(resolve => this.once(eventName, resolve));\r\n    }\r\n\r\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [SOCKET_CONFIG_TOKEN, ] }, ]},\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
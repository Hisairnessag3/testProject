(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('rxjs/add/operator/share'), require('socket.io-client')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', 'rxjs/add/operator/share', 'socket.io-client'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.socketio = global.ng.socketio || {}),global.ng.core,global.Rx,null,global.io));
}(this, (function (exports,_angular_core,rxjs_Observable,rxjs_add_operator_share,io) { 'use strict';

var io__default = io['default'];

var WrappedSocket = (function () {
    function WrappedSocket(config) {
        this.subscribersCounter = 0;
        this.emptyConfig = {
            url: '',
            options: {}
        };
        if (config === undefined)
            config = this.emptyConfig;
        var url = config.url;
        var options = config.options;
        var ioFunc = io__default ? io__default : io;
        this.ioSocket = ioFunc(url, options);
    }
    WrappedSocket.prototype.on = function (eventName, callback) {
        this.ioSocket.on(eventName, callback);
    };
    WrappedSocket.prototype.once = function (eventName, callback) {
        this.ioSocket.once(eventName, callback);
    };
    WrappedSocket.prototype.connect = function () {
        return this.ioSocket.connect();
    };
    WrappedSocket.prototype.disconnect = function (close) {
        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);
    };
    WrappedSocket.prototype.emit = function (eventName, data, callback) {
        return this.ioSocket.emit.apply(this.ioSocket, arguments);
    };
    WrappedSocket.prototype.removeListener = function (eventName, callback) {
        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);
    };
    WrappedSocket.prototype.removeAllListeners = function (eventName) {
        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);
    };
    WrappedSocket.prototype.fromEvent = function (eventName) {
        var _this = this;
        this.subscribersCounter++;
        return rxjs_Observable.Observable.create(function (observer) {
            _this.ioSocket.on(eventName, function (data) {
                observer.next(data);
            });
            return function () {
                if (_this.subscribersCounter === 1)
                    _this.ioSocket.removeListener(eventName);
            };
        }).share();
    };
    WrappedSocket.prototype.fromOneTimeEvent = function (eventName) {
        var _this = this;
        return new Promise(function (resolve) { return _this.once(eventName, resolve); });
    };
    return WrappedSocket;
}());
/** @nocollapse */
WrappedSocket.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [SOCKET_CONFIG_TOKEN,] },] },
]; };

/** Socket factory */
function SocketFactory(config) {
    return new WrappedSocket(config);
}
var SOCKET_CONFIG_TOKEN = new _angular_core.InjectionToken('__SOCKET_IO_CONFIG__');
var SocketIoModule = (function () {
    function SocketIoModule() {
    }
    SocketIoModule.forRoot = function (config) {
        return {
            ngModule: SocketIoModule,
            providers: [
                { provide: SOCKET_CONFIG_TOKEN, useValue: config },
                {
                    provide: WrappedSocket,
                    useFactory: SocketFactory,
                    deps: [SOCKET_CONFIG_TOKEN]
                }
            ]
        };
    };
    return SocketIoModule;
}());
SocketIoModule.decorators = [
    { type: _angular_core.NgModule, args: [{},] },
];
/** @nocollapse */
SocketIoModule.ctorParameters = function () { return []; };

exports.SocketIoModule = SocketIoModule;
exports.Socket = WrappedSocket;

Object.defineProperty(exports, '__esModule', { value: true });

})));
